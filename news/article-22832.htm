<!DOCTYPE html>
<html class="no-js" lang="zh-CN">

<head>
        <!-- Basic Page Needs
        ================================================== -->
    <link rel="canonical" href="https://v2rayw.github.io/news/article-22832.htm" />
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="icon" href="favicon.ico">
    <title>SpringBoot 2.3.x 分层构建 Docker 镜像实践详解</title>
        <meta name="description" content="作者：超级小豆丁 http://www.mydlq.club/article/98/ 目录   什么是镜像分层   SpringBoot 2.3.x 新增对分层的支持   创建测试的 SpringBo" />
        <link rel="icon" href="__ADDON__/img/v2rayw/favicon.ico" type="image/x-icon"/>
    <!-- Mobile Specific Metas
        ================================================== -->
    <meta name="format-detection" content="telephone=no">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- theme meta -->
    <!-- Template CSS Files
        ================================================== -->
    <!-- Twitter Bootstrs CSS -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayw/bootstrap/bootstrap.min.css">
    <!-- Ionicons Fonts Css -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayw/ionicons/ionicons.min.css">
    <!-- animate css -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayw/animate-css/animate.css">
    <!-- Hero area slider css-->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayw/slider/slider.css">
    <!-- slick slider -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayw/slick/slick.css">
    <!-- Fancybox -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayw/facncybox/jquery.fancybox.css">
    <!-- hover -->
    <link rel="stylesheet" href="/assets/website/js/frontend/v2rayw/hover/hover-min.css">
    <!-- template main css file -->
    <link rel="stylesheet" href="/assets/website/css/v2rayw/style.css">
    
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-V0WY1DJL68"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-V0WY1DJL68');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!--
        ==================================================
        Header Section Start
        ================================================== -->
    <section class="top-bar animated-header">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <nav class="navbar navbar-expand-lg navbar-light bg-light">
                                                <a class="navbar-brand" href="/">
                            <span>V2ray W</span>
                        </a>
                                                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>
                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav ml-auto">
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/">首页</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/free-nodes/">免费节点</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="/news/">新闻资讯</a>
                                </li>
                                                                <li class="nav-item">
                                    <a class="nav-link" href="#">关于</a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" href="#">联系</a>
                                </li>
                            </ul>
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </section>
    <!-- 
        ================================================== 
            Global Page Section Start
        ================================================== -->
    <section class="global-page-header">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="block">
                        <h1>SpringBoot 2.3.x 分层构建 Docker 镜像实践详解</h1>
                        <ol class="breadcrumb list-inline text-center">
                            <li class="list-inline-item">
                                <a href="/">
                                    <i class="ion-ios-home"></i>
                                    首页 &nbsp; &nbsp;/
                                </a>
                            </li>
                            <li class="list-inline-item">
                                <a href="/news/">
                                    <i class="ion-ios-home"></i>
                                    新闻资讯 &nbsp; &nbsp;/
                                </a>
                            </li>
                            <li class="active list-inline-item">正文</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!--
==================================================
About Section Start
================================================== -->
    <section id="about">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                      				  				  				<div id="content_views" class="htmledit_views"> <div id="js_content"> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/9aa13e26352905e78a5d6737ca0ae56b.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <p style="text-align: left"><em>作者：超级小豆丁</em></p> <p style="text-align: left">http://www.mydlq.club/article/98/</p> <h2>目录</h2> <ul> <li> <p>什么是镜像分层</p> </li> <li> <p>SpringBoot 2.3.x 新增对分层的支持</p> </li> <li> <p>创建测试的 SpringBoot 应用</p> </li> <li> <ul> <li> <p>Maven 中引入相关依赖和插件</p> </li> <li> <p>创建测试的 Controller 类</p> </li> <li> <p>创建 SpringBoot 启动类</p> </li> </ul> </li> <li> <p>创建两种构建镜像的 Dockerfile 脚本</p> </li> <li> <ul> <li> <p>普通镜像构建脚本文件 dockerfile-number</p> </li> <li> <p>分层镜像构建脚本文件 dockerfile-layer</p> </li> </ul> </li> <li> <p>使用两种 Dockerfile 构建项目镜像</p> </li> <li> <ul> <li> <p>在服务器一构建普通 Docker 镜像</p> </li> <li> <p>在服务器二构建分层 Docker 镜像</p> </li> </ul> </li> <li> <p>镜像推送到镜像仓库测试</p> </li> <li> <ul> <li> <p>推送镜像到镜像仓库测试</p> </li> <li> <p>镜像仓库拉取镜像测试</p> </li> </ul> </li> <li> <p>镜像构建、推送、拉取时间汇总</p> </li> <li> <ul> <li> <p>不使用分层构建镜像</p> </li> <li> <p>使用分层构建镜像</p> </li> <li> <p>总结</p> </li> </ul> </li> </ul> <hr/> <p><strong>系统环境：</strong></p> <ul> <li> <p>Docker 版本：19.03.13</p> </li> <li> <p>Open JDK 基础镜像版本：openjdk:8u275</p> </li> <li> <p>私有的 Harbor 镜像仓库：自建 Harbor 私库</p> </li> <li> <p>项目 Github：</p> </li> </ul> <blockquote> <p>https://github.com/my-dlq/blog-example/tree/master/springboot/springboot-layer</p> </blockquote> <p><strong>参考地址：</strong></p> <blockquote> <p>https://docs.docker.com/storage/storagedriver/</p> </blockquote> <h2>一、什么是镜像分层</h2> <p><strong>镜像的构成</strong></p> <p>现在一谈起镜像大部分都是指 Docker 引擎构建的镜像，一般 Docker 镜像是由很多层组成，底层是操作系统，然后在其之上是基础镜像或者用户自定义 Dockerfile 脚本中定义的中间层。</p> <p>其中镜像在构建完成后，用户只能对镜像进行读操作，而不能进行写操作，只有镜像启动后变为容器，才能进行读写操作。镜像整体结构，可以观看下图：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/aa399833d5c7928874aa478ef1b7c8e5.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <p>该图中展示了镜像的基本组成，但是图中这一个个中间层是什么呢？要想了解这些层具体是什么，那得知道如何构建 Docker 镜像了。平时我们构建 Docker 镜像时候，都是编写 Dockerfile 脚本，然后使用 Docker 镜像构建命令，按照脚本一行行执行构建。</p> <p>如下就是一个 Dockerfile 脚本，脚本内容就构建 Java 项目镜像常用的 Dockerfile 命令：</p> <pre class="has"><code class="language-go">FROM&nbsp;openjdk:8u275 VOLUME&nbsp;/tmp ADD&nbsp;target/*.jar&nbsp;app.jar ENV&nbsp;TZ="Asia/Shanghai" ENV&nbsp;JAVA_OPTS="" ENV&nbsp;JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENTRYPOINT&nbsp;["sh","-c","java&nbsp;$JVM_OPTS&nbsp;$JAVA_OPTS&nbsp;-jar&nbsp;/app.jar"]</code></pre> <p>有了 Dockerfile 脚本，我们需要执行 Docker 的构建镜像命令对执行 Dockerfile 脚本构建镜像，其中构建镜像的过程如下：</p> <pre class="has"><code class="language-go">##&nbsp;构建镜像的命令 $&nbsp;docker&nbsp;build&nbsp;-t&nbsp;java-test:latest&nbsp;.&nbsp;  ##&nbsp;命令执行的过程 Step&nbsp;1/7&nbsp;:&nbsp;FROM&nbsp;openjdk:8u275 &nbsp;---&gt;&nbsp;82f24ce79de6 Step&nbsp;2/7&nbsp;:&nbsp;VOLUME&nbsp;/tmp &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;a6361fdfc193 Removing&nbsp;intermediate&nbsp;container&nbsp;a6361fdfc193 &nbsp;---&gt;&nbsp;a43948bf1b98 Step&nbsp;3/7&nbsp;:&nbsp;ADD&nbsp;target/*.jar&nbsp;app.jar &nbsp;---&gt;&nbsp;18f4bc60818f Step&nbsp;4/7&nbsp;:&nbsp;ENV&nbsp;TZ="Asia/Shanghai" &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;cc738aa5865b Removing&nbsp;intermediate&nbsp;container&nbsp;cc738aa5865b &nbsp;---&gt;&nbsp;538adb85609e Step&nbsp;5/7&nbsp;:&nbsp;ENV&nbsp;JAVA_OPTS="" &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;f8b635d32b2b Removing&nbsp;intermediate&nbsp;container&nbsp;f8b635d32b2b &nbsp;---&gt;&nbsp;34e7a8cd7b6e Step&nbsp;6/7&nbsp;:&nbsp;ENV&nbsp;JVM_OPTS="-XX:MaxRAMPercentage=80.0" &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;9331cb6e443e Removing&nbsp;intermediate&nbsp;container&nbsp;9331cb6e443e &nbsp;---&gt;&nbsp;232b9c6c1d29 Step&nbsp;7/7&nbsp;:&nbsp;ENTRYPOINT&nbsp;["sh","-c","java&nbsp;$JVM_OPTS&nbsp;$JAVA_OPTS&nbsp;-jar&nbsp;/app.jar"&nbsp;] &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;c3a24fba3a10 Removing&nbsp;intermediate&nbsp;container&nbsp;c3a24fba3a10 &nbsp;---&gt;&nbsp;a41974d5f0e3</code></pre> <p>可以看到总共存在 7 个构建步骤，每步都与 Dockerfile 里面一行指令对应。样子和下图相似：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/ea401cd33cd9c22e9efa28840186d3f4.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <p>如果这时候，我们改变原来 Dockerfile 内容，创建一个新的镜像，其 Dockerfile 如下：</p> <pre class="has"><code class="language-go">FROM&nbsp;openjdk:8u275 VOLUME&nbsp;/tmp ADD&nbsp;target/*.jar&nbsp;app.jar ENV&nbsp;TZ="Asia/Macao"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#与原来&nbsp;Dockerfile&nbsp;不同 ENV&nbsp;JVM_OPTS="-Xmx512m&nbsp;-Xss256k"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#与原来&nbsp;Dockerfile&nbsp;不同 ENTRYPOINT&nbsp;["sh","-c","java&nbsp;$JVM_OPTS&nbsp;$JAVA_OPTS&nbsp;-jar&nbsp;/app.jar"&nbsp;]</code></pre> <p>执行 Docker 命令构建镜像：</p> <pre class="has"><code class="language-go">$&nbsp;docker&nbsp;build&nbsp;-t&nbsp;java-test2:latest&nbsp;.  Step&nbsp;1/6&nbsp;:&nbsp;FROM&nbsp;openjdk:8u275 &nbsp;---&gt;&nbsp;82f24ce79de6 Step&nbsp;2/6&nbsp;:&nbsp;VOLUME&nbsp;/tmp &nbsp;---&gt;&nbsp;Using&nbsp;cache &nbsp;---&gt;&nbsp;a43948bf1b98 Step&nbsp;3/6&nbsp;:&nbsp;ADD&nbsp;target/*.jar&nbsp;app.jar &nbsp;---&gt;&nbsp;Using&nbsp;cache &nbsp;---&gt;&nbsp;18f4bc60818f Step&nbsp;4/6&nbsp;:&nbsp;ENV&nbsp;TZ="Asia/Macao" &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;fd98b90a5485 Removing&nbsp;intermediate&nbsp;container&nbsp;fd98b90a5485 &nbsp;---&gt;&nbsp;afab3fcdab07 Step&nbsp;5/6&nbsp;:&nbsp;ENV&nbsp;JVM_OPTS="-Xmx512m&nbsp;-Xss256k" &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;19a99576fba9 Removing&nbsp;intermediate&nbsp;container&nbsp;19a99576fba9 &nbsp;---&gt;&nbsp;4eeab7d7c720 Step&nbsp;6/6&nbsp;:&nbsp;ENTRYPOINT&nbsp;["sh","-c","java&nbsp;$JVM_OPTS&nbsp;$JAVA_OPTS&nbsp;-jar&nbsp;/app.jar"&nbsp;] &nbsp;---&gt;&nbsp;Running&nbsp;in&nbsp;2dba72e1eef4 Removing&nbsp;intermediate&nbsp;container&nbsp;2dba72e1eef4 &nbsp;---&gt;&nbsp;7c706ecf7698</code></pre> <p>可以观察到执行过程中，从一开始执行的构建步骤中显示，并没有生成新的中间层镜像，而是直接使用了已经存在的缓存镜像。直至 4⁄6 这部中，由于新的 Dockerfile 与原来 Dockerfile 发生变动，所以这部中间层镜像直接是新创建的，并没有使用缓存中间层镜像。</p> <p>然后往下观察，发现之后的全部构建都是新创建的中间层镜像，即是脚本最后的一行和原来相同，也没有使用缓存中间层镜像。</p> <p>上面现象说明，Docker 镜像在构建过程中按照 Dockerfile 自上往下的执行顺序中，如果从最上层开始，其脚本内容和已有的缓存中间层镜像内容一致，就会引入缓存中的中间层镜像（并不是直接复制缓存镜像，而是引入镜像文件地址，多个镜像共享这些中间层镜像）。</p> <p>但是，如果执行过程中中间任意一行镜像构建的内容发生变化，那么当前行和之后的全部行在执行时就不会使用缓存中的中间层镜像，而是全部创建新的镜像。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/352fb4e2cf7248b3a3cc18f0f7ce8773.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <p>这就是 Docker 镜像中缓存中间层镜像的复用，学会使用缓存构建镜像将大大减少存储空间的占用以及镜像的构建的构建速度，镜像的缓存不仅仅体现在镜像的构建上，在执行”镜像推送”、”镜像拉取”操作时都能观察到其的好处。</p> <ul> <li> <p><strong>镜像缓在镜像推送的体现：</strong>&nbsp;如镜像推送时候，也是将镜像整体构成的中间层镜像并行推送到镜像仓库，如果镜像仓库中已经存某个中间层镜像，那么推送过程就不会再次将该层镜像推送到镜像仓库，而是将仓库中并不存在中间层镜像推送到其中。</p> </li> <li> <p><strong>镜像缓存在镜像拉取的体现：</strong>&nbsp;在拉取镜像时候，如果本地某个大镜像的中间层镜像的组成中，已经包含新拉取镜像的中间层部分镜像，那么将直接复用本地已经镜像的中间层镜像，不必再将其进行拉取，而本地不存在的中间层镜像将会被继续拉取。</p> </li> </ul> <p>说了这么多，相信大家已经对镜像缓存的使用有了初步了解，那么再谈及为什么需要镜像分层就很好解释，其原因就是 Docker 想提高资源的复用率，将一个大镜像拆分成很多层小镜像组成，以达到镜像中间层的复用的目的。</p> <h2>二、SpringBoot 2.3.x 新增对分层的支持</h2> <p>SpringBoot 2.3.x 以后支持分层打包应用，需要 Pom.xml 中引入 SpringBoot 2.3.x 后的父依赖和使用 SpringBoot 打包插件<code>spring-boot-maven-plugin</code>，并且开启<code>layers</code>&nbsp;功能，然后执行 Maven 编译源码构建 Jar 包，使用该 Jar 包就可以构建基于分层模式的 Docker 镜像：</p> <p>项目 pom.xml 中引入 SpringBoot 2.3.x 依赖：</p> <pre class="has"><code class="language-go">&lt;parent&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;2.3.6.RELEASE&lt;/version&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;relativePath/&gt; &lt;/parent&gt;</code></pre> <p>项目 pom.xml 中引入 spring-boot-maven-plugin 打包插件，并且开启分层功能：</p> <pre class="has"><code class="language-go">&lt;build&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;plugins&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--开启分层编译支持--&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;layers&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;enabled&gt;true&lt;/enabled&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/layers&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugin&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugins&gt; &lt;/build&gt;</code></pre> <p>执行 Maven 命令，构建分层的 JAR 包，命令和平时的 Maven 构建命令相同：</p> <pre class="has"><code class="language-go">$&nbsp;mvn&nbsp;install</code></pre> <p>观察 Jar 结构，可以看到里面多了<code>classpath.idx</code>&nbsp;与<code>layers.idx</code>&nbsp;两个文件：</p> <ul> <li> <p><strong>classpath.idx：</strong>&nbsp;文件列出了依赖的 jar 包列表，到时候会按照这个顺序载入。</p> </li> <li> <p><strong>layers.idx：</strong>&nbsp;文件清单，记录了所有要被复制到 Dokcer 镜像中的文件信息。</p> </li> </ul> <p>根据官方介绍，在构建<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ%3D%3D&amp;chksm=ebd5fb65dca272734254fb28e276cb7836377eb0a00f45400c77aebcb9651f1db7dc09c4e883&amp;idx=3&amp;mid=2247500873&amp;scene=21&amp;sn=b64376259e07adaa7c0943842c4618d2#wechat_redirect"  rel="nofollow">Docker 镜像</a>前需要从 Jar 中提起出对应的分层文件到 Jar 外面，可用使用下面命令列出可以从分层 Jar 中提取出的文件夹信息：</p> <pre class="has"><code class="language-go">$&nbsp;java&nbsp;-Djarmode=layertools&nbsp;-jar&nbsp;target/springboot-layer-0.0.1.jar&nbsp;list</code></pre> <p>可用该看到以下输出，下面的内容就是接下来使用分层构建后，生成的 Jar 提取出对应资源后的结构：</p> <pre class="has"><code class="language-go">dependencies spring-boot-loader snapshot-dependencies application</code></pre> <p>上面即是使用分层工具提取 Jar 的内容后生成的文件夹，其中各个文件夹作用是：</p> <ul> <li> <p><strong>dependencies：</strong>&nbsp;存储项目正常依赖 Jar 的文件夹。</p> </li> <li> <p><strong>snapshot-dependencies：</strong>&nbsp;存储项目快照依赖 Jar 的文件夹。</p> </li> <li> <p><strong>resources：</strong>&nbsp;用于存储静态资源的文件夹。</p> </li> <li> <p><strong>application：</strong>&nbsp;用于存储应用程序类相关文件的文件夹。</p> </li> </ul> <h2>三、创建测试的 SpringBoot 应用</h2> <p>创建测试的 SpringBoot 项目，并且在 pom.xml 中开启镜像分层。</p> <h3>1、Maven 中引入相关依赖和插件</h3> <pre class="has"><code class="language-go">&lt;?xml&nbsp;version="1.0"&nbsp;encoding="UTF-8"?&gt; &lt;project&nbsp;xmlns="http://maven.apache.org/POM/4.0.0" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xsi:schemaLocation="http://maven.apache.org/POM/4.0.0&nbsp;http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&lt;parent&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;2.3.6.RELEASE&lt;/version&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/parent&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;springboot-dockerfile-layer&lt;/artifactId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;packaging&gt;jar&lt;/packaging&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;name&gt;springboot-dockerfile-layer&lt;/name&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;description&gt;springboot&nbsp;build&nbsp;layer&nbsp;example&lt;/description&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&lt;dependencies&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;dependency&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/dependency&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/dependencies&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&lt;build&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugins&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;plugin&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;configuration&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;layers&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;enabled&gt;true&lt;/enabled&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/layers&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/configuration&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugin&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/plugins&gt; &nbsp;&nbsp;&nbsp;&nbsp;&lt;/build&gt;  &lt;/project&gt;</code></pre> <h3>2、创建测试的 Controller 类</h3> <pre class="has"><code class="language-go">import&nbsp;org.springframework.web.bind.annotation.GetMapping; import&nbsp;org.springframework.web.bind.annotation.RestController;  @RestController public&nbsp;class&nbsp;TestController&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;@GetMapping("/hello") &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;String&nbsp;hello()&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;"hello&nbsp;world!"; &nbsp;&nbsp;&nbsp;&nbsp;}  }</code></pre> <h3>3、创建<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ%3D%3D&amp;chksm=ebd5c43fdca24d293d89da37f59d5051a0931712fefa6fcab69ae29d97971e262dde4813b4d3&amp;idx=2&amp;mid=2247498515&amp;scene=21&amp;sn=99d326ee296a8c363c941c7edd34a002#wechat_redirect"  rel="nofollow">SpringBoot 启动类</a></h3> <pre class="has"><code class="language-go">import&nbsp;org.springframework.boot.SpringApplication; import&nbsp;org.springframework.boot.autoconfigure.SpringBootApplication;  @SpringBootApplication public&nbsp;class&nbsp;Application&nbsp;{  &nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String[]&nbsp;args)&nbsp;{ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(Application.class,&nbsp;args); &nbsp;&nbsp;&nbsp;&nbsp;}  }</code></pre> <h2>四、创建两种构建镜像的 Dockerfile 脚本</h2> <p>为了方便体现出 SpringBoot 2.3.x 支持的分层构建 Dockerfile 的优点，这里在 Java 源码文件夹下，创建普通与分层两种构建镜像的 Dockerfile 脚本，后续会使用这两种脚本构建 Docker 镜像进行构建速度、推送速度、拉取速度的对比。</p> <h3>1、普通镜像构建脚本文件 dockerfile-number</h3> <pre class="has"><code class="language-go">FROM&nbsp;openjdk:8u275 VOLUME&nbsp;/tmp ADD&nbsp;target/*.jar&nbsp;app.jar RUN&nbsp;sh&nbsp;-c&nbsp;'touch&nbsp;/app.jar' ENV&nbsp;TZ="Asia/Shanghai" RUN&nbsp;ln&nbsp;-snf&nbsp;/usr/share/zoneinfo/$TZ&nbsp;/etc/localtime&nbsp;&amp;&amp;&nbsp;echo&nbsp;$TZ&nbsp;&gt;&nbsp;/etc/timezone ENV&nbsp;JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENV&nbsp;JAVA_OPTS="" ENTRYPOINT&nbsp;[&nbsp;"sh",&nbsp;"-c",&nbsp;"java&nbsp;$JAVA_OPTS&nbsp;-Djava.security.egd=file:/dev/./urandom&nbsp;-jar&nbsp;/app.jar&nbsp;$APP_OPTS"&nbsp;]</code></pre> <p><strong>说明：</strong></p> <ul> <li> <p><strong>TZ：</strong>&nbsp;时区设置，而 Asia/Shanghai 表示使用中国上海时区。</p> </li> <li> <p><strong>JVM_OPTS：</strong>&nbsp;指定 JVM 启动时候的参数，-XX:MaxRAMPercentage 参数和 -Xmx 类似，都是限制堆内存大小，只不过 -Xmx 需要手动指定限制大小，而 -XX:MaxRAMPercentage 则是根据虚拟机可用内存百分比限制。</p> </li> <li> <p><strong>JAVA_OPTS：</strong>&nbsp;在镜像启动时指定的自定义 Java 参数，例如 -Dspring.application.name=xxx。</p> </li> </ul> <h3>2、分层镜像构建脚本文件 dockerfile-layer</h3> <pre class="has"><code class="language-go">FROM&nbsp;openjdk:8u275&nbsp;as&nbsp;builder WORKDIR&nbsp;application COPY&nbsp;target/*.jar&nbsp;application.jar RUN&nbsp;java&nbsp;-Djarmode=layertools&nbsp;-jar&nbsp;application.jar&nbsp;extract  FROM&nbsp;openjdk:8u275 WORKDIR&nbsp;application COPY&nbsp;--from=builder&nbsp;application/dependencies/&nbsp;./ COPY&nbsp;--from=builder&nbsp;application/snapshot-dependencies/&nbsp;./ COPY&nbsp;--from=builder&nbsp;application/spring-boot-loader/&nbsp;./ COPY&nbsp;--from=builder&nbsp;application/application/&nbsp;./ ENV&nbsp;TZ="Asia/Shanghai" ENV&nbsp;JVM_OPTS="-XX:MaxRAMPercentage=80.0" ENV&nbsp;JAVA_OPTS="" ENTRYPOINT&nbsp;["sh","-c","java&nbsp;$JVM_OPTS&nbsp;$JAVA_OPTS&nbsp;org.springframework.boot.loader.JarLauncher"]</code></pre> <p><strong>说明：</strong></p> <ul> <li> <p><strong>TZ：</strong>&nbsp;时区设置，而 Asia/Shanghai 表示使用中国上海时区。</p> </li> <li> <p><strong>-Djarmode=layertools：</strong>&nbsp;指定构建 Jar 的模式。</p> </li> <li> <p><strong>extract：</strong>&nbsp;从 Jar 包中提取构建镜像所需的内容。</p> </li> <li> <p><strong>-from=builder</strong>&nbsp;多级镜像构建中，从上一级镜像复制文件到当前镜像中。</p> </li> </ul> <h2>五、使用两种 Dockerfile 构建项目镜像</h2> <h3>1、在服务器一构建普通 Docker 镜像</h3> <p><strong>(1)、第一次构建</strong></p> <pre class="has"><code class="language-go">##&nbsp;执行&nbsp;Maven&nbsp;命令，将源代码构建&nbsp;Jar&nbsp;包 $&nbsp;mvn&nbsp;clean&nbsp;install  ##&nbsp;构建&nbsp;SpringBoot&nbsp;应用的&nbsp;Docker&nbsp;镜像 $&nbsp;time&nbsp;docker&nbsp;build&nbsp;-t&nbsp;hub.mydlq.club/library/springboot-normal:0.0.1&nbsp;.</code></pre> <p>Docker 镜像构建总共花费 24.98s 时间。</p> <p><strong>(2)、第二次构建（修改依赖 pom.xml 文件）</strong></p> <pre class="has"><code class="language-go">##&nbsp;修改&nbsp;pom.xml&nbsp;里面的依赖，随意添加一个新的依赖包，然后再次将源代码构建&nbsp;Jar&nbsp;包 $&nbsp;mvn&nbsp;clean&nbsp;install  ##&nbsp;构建&nbsp;SpringBoot&nbsp;应用的&nbsp;Docker&nbsp;镜像 $&nbsp;time&nbsp;docker&nbsp;build&nbsp;-t&nbsp;hub.mydlq.club/library/springboot-normal:0.0.2&nbsp;.</code></pre> <p>Docker 镜像构建总共花费 1.27s 时间。</p> <p><strong>(3)、第三次构建（修改代码内容）</strong></p> <pre class="has"><code class="language-go">##&nbsp;修改源代码任意内容后，然后再次将源代码构建&nbsp;Jar&nbsp;包 $&nbsp;mvn&nbsp;clean&nbsp;install  ##&nbsp;构建&nbsp;SpringBoot&nbsp;应用的&nbsp;Docker&nbsp;镜像 $&nbsp;time&nbsp;docker&nbsp;build&nbsp;-t&nbsp;hub.mydlq.club/library/springboot-normal:0.0.3&nbsp;.</code></pre> <p>Docker 镜像构建总共花费 1.32s 时间。</p> <h3>2、在服务器二构建分层 Docker 镜像</h3> <p><strong>(1)、第一次构建</strong></p> <pre class="has"><code class="language-go">##&nbsp;执行&nbsp;Maven&nbsp;命令，将源代码构建&nbsp;Jar&nbsp;包 $&nbsp;mvn&nbsp;clean&nbsp;install  ##&nbsp;构建&nbsp;SpringBoot&nbsp;应用的&nbsp;Docker&nbsp;镜像 $&nbsp;time&nbsp;docker&nbsp;build&nbsp;-t&nbsp;hub.mydlq.club/library/springboot-layer:0.0.1&nbsp;.</code></pre> <p>Docker 镜像构建总共花费 26.12s 时间。</p> <p><strong>(2)、第二次构建（修改依赖 pom.xml 文件）</strong></p> <pre class="has"><code class="language-go">##&nbsp;修改&nbsp;pom.xml&nbsp;里面的依赖，随意添加一个新的依赖包，然后再次将源代码构建&nbsp;Jar&nbsp;包 $&nbsp;mvn&nbsp;clean&nbsp;install  ##&nbsp;构建&nbsp;SpringBoot&nbsp;应用的&nbsp;Docker&nbsp;镜像 $&nbsp;time&nbsp;docker&nbsp;build&nbsp;-t&nbsp;hub.mydlq.club/library/springboot-layer:0.0.2&nbsp;.</code></pre> <p>Docker 镜像构建总共花费 3.44s 时间。</p> <p><strong>(3)、第三次构建（修改代码内容）</strong></p> <pre class="has"><code class="language-go">##&nbsp;修改源代码任意内容后，然后再次将源代码构建&nbsp;Jar&nbsp;包 $&nbsp;mvn&nbsp;clean&nbsp;install  ##&nbsp;构建&nbsp;SpringBoot&nbsp;应用的&nbsp;Docker&nbsp;镜像 $&nbsp;time&nbsp;docker&nbsp;build&nbsp;-t&nbsp;hub.mydlq.club/library/springboot-layer:0.0.3&nbsp;.</code></pre> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=http://mp.weixin.qq.com/s?__biz=MzI4Njc5NjM1NQ%3D%3D&amp;chksm=ebd5cf86dca246908a1c476419fdc749145565c878e69c926e019a93a60f34ff4d0a7194479a&amp;idx=2&amp;mid=2247495850&amp;scene=21&amp;sn=e862e1f2a1564353641575e925257761#wechat_redirect"  rel="nofollow">Docker 镜像构建</a>总共花费 2.82s 时间。</p> <h2>六、镜像推送到镜像仓库测试</h2> <h3>1、推送镜像到镜像仓库测试</h3> <p>服务器一推送普通镜像到镜像仓库1：</p> <pre class="has"><code class="language-go">##&nbsp;第一次推送镜像 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.1  real&nbsp;&nbsp;&nbsp;&nbsp;0m35.215s  ##&nbsp;第二次推送镜像 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.2  real&nbsp;&nbsp;&nbsp;&nbsp;0m14.051s  ##&nbsp;第三次推送镜像 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.3  real&nbsp;&nbsp;&nbsp;&nbsp;0m14.183s</code></pre> <p>服务器二推送分层镜像到镜像仓库2：</p> <pre class="has"><code class="language-go">##&nbsp;第一次推送镜像 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-layer:0.0.1  real&nbsp;&nbsp;&nbsp;&nbsp;0m34.121s  ##&nbsp;第二次推送镜像 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-layer:0.0.2  real&nbsp;&nbsp;&nbsp;&nbsp;0m13.605s  ##&nbsp;第三次推送镜像 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-layer:0.0.3  real&nbsp;&nbsp;&nbsp;&nbsp;0m4.805s</code></pre> <h3>2、镜像仓库拉取镜像测试</h3> <p>服务器一推送从镜像仓库1拉取镜像：</p> <pre class="has"><code class="language-go">##&nbsp;清理全部镜像 $&nbsp;docker&nbsp;rm&nbsp;--force&nbsp;$(docker&nbsp;images&nbsp;-qa)  ##&nbsp;拉取镜像&nbsp;springboot-normal:0.0.1 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.1  real&nbsp;&nbsp;&nbsp;&nbsp;0m35.395s  ##&nbsp;拉取镜像&nbsp;springboot-normal:0.0.2 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.2  real&nbsp;&nbsp;&nbsp;&nbsp;0m6.501s  ##&nbsp;拉取镜像&nbsp;springboot-normal:0.0.3 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.3  real&nbsp;&nbsp;&nbsp;&nbsp;0m6.993s</code></pre> <p>服务器二推送从镜像仓库2拉取镜像：</p> <pre class="has"><code class="language-go">##&nbsp;清理全部镜像 $&nbsp;docker&nbsp;rm&nbsp;--force&nbsp;$(docker&nbsp;images&nbsp;-qa)  ##&nbsp;拉取镜像&nbsp;springboot-layer:0.0.1 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.1  real&nbsp;&nbsp;&nbsp;&nbsp;0m30.615s  ##&nbsp;拉取镜像&nbsp;springboot-layer:0.0.2 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.2  real&nbsp;&nbsp;&nbsp;&nbsp;0m4.811s  ##&nbsp;拉取镜像&nbsp;springboot-layer:0.0.3 $&nbsp;time&nbsp;docker&nbsp;push&nbsp;hub.mydlq.club/library/springboot-normal:0.0.3  real&nbsp;&nbsp;&nbsp;&nbsp;0m1.293s</code></pre> <h2>七、镜像构建、推送、拉取时间汇总</h2> <h3>1、不使用分层构建镜像</h3> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/6d5eda4f488946b741dff8f3e3a61678.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <p><strong>如下图：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/e19ade1b0a373dd7e60c239416d589ae.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <h3>2、使用分层构建镜像</h3> <p style="text-align: center"><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/636ea9d70128fb2e6a2caa84ac2a7f8a.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <p><strong>如下图：</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/8d01090b8ca957004753666f28887620.jpg" alt="SpringBoot 2.3.x 分层构建 Docker 镜像实践详解"/></p> <h3>3、总结</h3> <p>上面进行了使用 SpringBoot2.3.x 分层的方式构建镜像与普通的方式构建镜像，在镜像的构建、推送、拉取方面进行了执行速度对比，总结出如下结论：</p> <ul> <li> <p><strong>镜像构建：</strong>&nbsp;在构建上，使用分层 Jar 构建镜像可能比普通方式构建镜像更繁琐，所以也更耗时，故而在构建上分层 Jar 构建镜像没有太多优势。</p> </li> <li> <p><strong>镜像推送：</strong>&nbsp;在推送上，如果每次构建镜像都只是修改构建镜像项目的源码，使用分层 Jar 构建镜像，可以大大加快镜像推送速度。如果是修改构建镜像项目中的依赖包，则和普通构建一样速度很慢。</p> </li> <li> <p><strong>镜像拉取：</strong>&nbsp;拉取和推送类似，如果只修改构建镜像项目的源码，只会拉取源码相关的中间层镜像，该层非常小（一般几百KB），拉取速度自然非常快。而对构建镜像项目的依赖包进行变动（增加依赖、删除依赖、修改依赖版本等），则会和普通方式构建镜像一样，拉取速度很慢，这是因为依赖包层是中间层镜像最大的一层（一般在10MB~200MB之间），如果该层发生变动则整个层会进行重新拉取，这样速度自然会很慢。</p> </li> </ul> <pre class="has"><code class="language-php"></code></pre> </div> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-22377.htm">聊城宠物狗商家电话多少（聊城宠物狗市场）</a></p>
                                        <p>下一个：<a href="/news/article-22833.htm">深圳 宠物 领养 深圳宠物领养中心 免费</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-10-15-free-v2ray.htm" title="10月15日→22.5M/S|2024年最新免费节点V2ray W订阅链接地址">10月15日→22.5M/S|2024年最新免费节点V2ray W订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-16-free-v2ray.htm" title="11月16日→20.2M/S|2024年最新免费节点V2ray W订阅链接地址">11月16日→20.2M/S|2024年最新免费节点V2ray W订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-18-node-share.htm" title="9月18日→22.3M/S|2024年最新免费节点V2ray W订阅链接地址">9月18日→22.3M/S|2024年最新免费节点V2ray W订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-21911.htm" title="vue路由守卫，限制前端页面访问权限">vue路由守卫，限制前端页面访问权限</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-27-free-subscribe-node.htm" title="11月27日→21.4M/S|2024年最新免费节点V2ray W订阅链接地址">11月27日→21.4M/S|2024年最新免费节点V2ray W订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-25-free-high-speed-nodes.htm" title="10月25日→20.1M/S|2024年最新免费节点V2ray W订阅链接地址">10月25日→20.1M/S|2024年最新免费节点V2ray W订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-18735.htm" title="当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？">当我们更改小于当前序列号的AUTO_INCREMENT值时，MySQL将返回什么？</a></li>
                        <li class="py-2"><a href="/news/article-18736.htm" title="梦见抱住别的女人是什么意思（梦见抱着别人的女人是什么意思）">梦见抱住别的女人是什么意思（梦见抱着别人的女人是什么意思）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-30-free-high-speed-nodes.htm" title="10月30日→19.6M/S|2024年最新免费节点V2ray W订阅链接地址">10月30日→19.6M/S|2024年最新免费节点V2ray W订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-22-free-subscribe-node.htm" title="11月22日→19.9M/S|2024年最新免费节点V2ray W订阅链接地址">11月22日→19.9M/S|2024年最新免费节点V2ray W订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">24</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">23</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </section> <!-- /#about -->
        <footer id="footer">
        <div class="container">
            <div class="row content-justify-between">
                <div class="col-12 text-center">
                    <p class="copyright"><a href="/">V2ray W机场节点订阅官网</a> 版权所有 Powered by WordPress</p>
                </div>
            </div>
        </div>
    </footer> <!-- /#footer -->
    <!-- Template Javascript Files
  ================================================== -->
    <!-- jquery -->
    <script src="/assets/website/js/frontend/v2rayw/jQurey/jquery.min.js"></script>
    <!-- Form Validation -->
    <script src="/assets/website/js/frontend/v2rayw/form-validation/jquery.form.js"></script>
    <script src="/assets/website/js/frontend/v2rayw/form-validation/jquery.validate.min.js"></script>
    <!-- slick slider -->
    <script src="/assets/website/js/frontend/v2rayw/slick/slick.min.js"></script>
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/v2rayw/bootstrap/bootstrap.min.js"></script>
    <!-- wow js -->
    <script src="/assets/website/js/frontend/v2rayw/wow-js/wow.min.js"></script>
    <!-- slider js -->
    <script src="/assets/website/js/frontend/v2rayw/slider/slider.js"></script>
    <!-- Fancybox -->
    <script src="/assets/website/js/frontend/v2rayw/facncybox/jquery.fancybox.js"></script>
    <!-- template main js -->
    <script src="/assets/website/js/frontend/v2rayw/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>